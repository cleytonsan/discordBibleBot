# interactive_bible_bot.py
import os
import requests
import google.generativeai as genai
import datetime
import pytz
import random
import re
import discord
from discord.ext import commands

# --- Configura√ß√µes das Chaves/Tokens ---
GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")
DISCORD_BOT_TOKEN = os.getenv("DISCORD_BOT_TOKEN")

# --- Verifica√ß√£o de Seguran√ßa ---
if not GOOGLE_API_KEY:
    print("ERRO: GOOGLE_API_KEY n√£o encontrada nas vari√°veis de ambiente.")
    exit(1)
if not DISCORD_BOT_TOKEN:
    print("ERRO: DISCORD_BOT_TOKEN n√£o encontrado nas vari√°veis de ambiente.")
    exit(1)

# --- Configura√ß√£o da API do Google Gemini ---
genai.configure(api_key=GOOGLE_API_KEY)
model = genai.GenerativeModel('gemini-1.5-flash')

# --- Dicion√°rio de Livros da B√≠blia e seus cap√≠tulos ---
bible_books_chapters = {
    "G√™nesis": 50, "√äxodo": 40, "Lev√≠tico": 27, "N√∫meros": 36, "Deuteron√¥mio": 34,
    "Josu√©": 24, "Ju√≠zes": 21, "Rute": 4, "1 Samuel": 31, "2 Samuel": 24,
    "1 Reis": 22, "2 Reis": 25, "1 Cr√¥nicas": 29, "2 Cr√¥nicas": 36, "Esdras": 10,
    "Neemias": 13, "Ester": 10, "J√≥": 42, "Salmos": 150, "Prov√©rbios": 31,
    "Eclesiastes": 12, "Cantares de Salom√£o": 8, "Isa√≠as": 66, "Jeremias": 52, "Lamenta√ß√µes": 5,
    "Ezequiel": 48, "Daniel": 12, "Os√©ias": 14, "Joel": 3, "Am√≥s": 9,
    "Obadias": 1, "Jonas": 4, "Miqu√©ias": 7, "Naum": 3, "Habacuque": 3,
    "Sofonias": 3, "Ageu": 2, "Zacarias": 14, "Malaquias": 4,
    "Mateus": 28, "Marcos": 16, "Lucas": 24, "Jo√£o": 21, "Atos": 28,
    "Romanos": 16, "1 Cor√≠ntios": 16, "2 Cor√≠ntios": 13, "G√°latas": 6, "Ef√©sios": 6,
    "Filipenses": 4, "Colossenses": 4, "1 Tessalonicenses": 5, "2 Tessalonicenses": 3,
    "1 Tim√≥teo": 6, "2 Tim√≥teo": 4, "Tito": 3, "Filemom": 1, "Hebreus": 13,
    "Tiago": 5, "1 Pedro": 5, "2 Pedro": 3, "1 Jo√£o": 5, "2 Jo√£o": 1,
    "3 Jo√£o": 1, "Judas": 1, "Apocalipse": 22
}

def generate_prayer() -> str:
    prompt = """Gere uma breve ora√ß√£o (m√°ximo 4 frases) em portugu√™s para ser feita antes da leitura da B√≠blia. A ora√ß√£o deve pedir entendimento, sabedoria e ilumina√ß√£o espiritual para compreender a Palavra de Deus. Use um tom reverente e devocional. Comece com 'üôèüèΩ' e termine com 'üôèüèΩ'."""
    try:
        response = model.generate_content(prompt)
        text = response.text.strip()
        if not text.startswith('üôèüèΩ'):
            text = 'üôèüèΩ ' + text
        if not text.endswith('üôèüèΩ'):
            text = text + ' üôèüèΩ'
        return text
    except Exception as e:
        print(f"Erro ao gerar ora√ß√£o: {e}")
        return "Erro ao gerar ora√ß√£o. üôèüèΩ"

def get_verse_and_explanation_from_gemini(book_chapter_verse: str) -> tuple[str, str, str]:
    prompt = f"""
    Para a passagem b√≠blica "{book_chapter_verse}" da B√≠blia Sagrada, fa√ßa o seguinte:

    1.  Apresente o vers√≠culo completo, incluindo a refer√™ncia (Ex: Jo√£o 3:16).
    2.  Depois, explique o significado **desse vers√≠culo e do seu contexto no cap√≠tulo**, em termos do que Deus quer nos dizer hoje.
    3.  A explica√ß√£o deve ter entre 80 e 150 palavras, em um tom inspirador, reflexivo e teologicamente correto.
    4.  Formate sua resposta exatamente assim, com os r√≥tulos em MAI√öSCULAS e seguidos de dois pontos, e as se√ß√µes separadas por uma linha vazia. N√£o inclua texto adicional.
        VERSICULO_REFERENCIA: [O vers√≠culo com a refer√™ncia, ex: G√™nesis 1:1]

        VERSICULO_TEXTO: [O texto completo do vers√≠culo]

        EXPLICACAO: [A explica√ß√£o do vers√≠culo e cap√≠tulo]
    """
    try:
        response = model.generate_content(prompt)
        text_response = response.text.strip()

        ref_match = re.search(r"VERSICULO_REFERENCIA:\s*(.*?)(?=\n\n|$)", text_response, re.DOTALL)
        text_match = re.search(r"VERSICULO_TEXTO:\s*(.*?)(?=\n\n|$)", text_response, re.DOTALL)
        expl_match = re.search(r"EXPLICACAO:\s*(.*?)$", text_response, re.DOTALL)

        versiculo_referencia = ref_match.group(1).strip() if ref_match else "Refer√™ncia n√£o encontrada."
        versiculo_texto = text_match.group(1).strip() if text_match else "Texto do vers√≠culo n√£o encontrado."
        explicacao = expl_match.group(1).strip() if expl_match else "Explica√ß√£o n√£o gerada."

        return versiculo_referencia, versiculo_texto, explicacao

    except Exception as e:
        print(f"Erro ao obter vers√≠culo e explica√ß√£o do Gemini: {e}")
        return "Erro", "Erro", f"Erro ao gerar conte√∫do b√≠blico: {e}. Verifique as logs."

# --- Configura√ß√£o do Bot Discord ---
intents = discord.Intents.default()
intents.message_content = True

bot = commands.Bot(command_prefix='!', intents=intents)

@bot.event
async def on_ready():
    print(f'{bot.user.name} conectado ao Discord!')
    print(f'ID: {bot.user.id}')
    print('Aguardando comandos...')

@bot.event
async def on_command_error(ctx, error):
    if isinstance(error, commands.CommandNotFound):
        await ctx.send("Desculpe, esse comando n√£o existe. Use `!biblia <livro> <cap√≠tulo>:<vers√≠culo>` (ex: `!biblia G√™nesis 1:1`)")
    elif isinstance(error, commands.MissingRequiredArgument):
        await ctx.send("Por favor, forne√ßa a refer√™ncia b√≠blica. Ex: `!biblia Jo√£o 3:16`")
    else:
        print(f'Erro no comando: {error}')
        await ctx.send(f'Ocorreu um erro inesperado ao processar seu comando.')

@bot.command(name='biblia', help='Envia uma ora√ß√£o, um vers√≠culo b√≠blico e sua explica√ß√£o. Uso: !biblia <Livro> <Cap√≠tulo>:<Vers√≠culo> (ex: !biblia Jo√£o 3:16)')
async def biblia(ctx, *, reference: str):
    await ctx.send(f"Buscando a passagem **{reference}** para voc√™... Por favor, aguarde alguns segundos.")

    oracao = generate_prayer()
    versiculo_ref, versiculo_texto, explicacao = get_verse_and_explanation_from_gemini(reference)

    agora = datetime.datetime.now(tz=pytz.timezone('America/Sao_Paulo'))

    mensagem_discord = f"""
    **Mensagem B√≠blica Solicitada ({agora.strftime('%d/%m/%Y %H:%M:%S')} Hor√°rio de SP):**

    1. {oracao}

    2. üìö**{versiculo_ref}**üìö
    {versiculo_texto}

    3. üìù**Explica√ß√£o:**üìù
    {explicacao}
    """

    await ctx.send(mensagem_discord)

if __name__ == "__main__":
    bot.run(DISCORD_BOT_TOKEN)
    
